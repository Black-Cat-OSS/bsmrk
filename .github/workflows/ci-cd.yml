name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: |
          npm ci
          npm ls --depth=0
      
      - name: 🧪 Run tests
        env:
          NODE_OPTIONS: '--experimental-global-webcrypto'
        run: |
          npm run test:clean
          npm run test:coverage
      
      
      - name: 🏗️ Build package
        run: npm run build
      
      - name: 📋 Test build artifacts
        run: |
          ls -la dist/
          node -e "console.log('Testing CJS:', require('./dist/index.cjs'))"
          node -e "import('./dist/index.esm.js').then(m => console.log('Testing ESM:', m))"

  version-and-tag:
    name: Version and Tag
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build package
        run: npm run build
      
      - name: 📝 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: 🔢 Calculate next version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment minor version
          NEW_MINOR=$((MINOR + 1))
          
          # Check if minor version reaches 10, then reset and increment major
          if [ $NEW_MINOR -ge 10 ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          else
            NEW_MAJOR=$MAJOR
            NEW_PATCH=0
          fi
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Set outputs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
      
      - name: 🏷️ Create and push tag
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push origin main
          git push origin ${{ steps.version.outputs.tag }}
      
      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## Changes in ${{ steps.version.outputs.tag }}
            
            Auto-generated release from successful CI/CD pipeline.
            
            ### What's included:
            - ✅ All tests passed
            - 🏗️ Build artifacts generated
            - 🔄 Version automatically incremented
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.previous-version }}...${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, version-and-tag]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build package
        run: npm run build
      
      - name: 🚀 Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Pull latest changes (including version bump)
          git pull origin main
          npm publish --access public
